/* 
*  This Singular Security Check script was generated by Invicti Standard 22.11.0.38744, at 03/01/2023 11:07:42 
*  For more information about Custom Script Checks and samples, please refer to documentation: 
*  https://www.invicti.com/support/custom-security-checks-scripting/ 
*/

var attacks = [
    {
        id: '86fcd40a-13b9-4a79-9caf-1d67e6971d38',
        name: 'Wordpress - Username Enumeration via Login Form',
    }
];

function createRawRequestBody(url, body) {
    var re = /(https?:\/\/)([^:^\/]*)(:\d*)(.*)?/;
    const capture = url.match(re);
    host =  capture[2].toString() + capture[3].toString();
    origin = capture[1].toString() + host;
    uri = capture[4].toString();
    var length = body.length;
    // prepare raw request    
    var raw =  `POST ${uri} HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.0 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
Origin: ${origin}
Content-Type: application/x-www-form-urlencoded
Cookie: wordpress_test_cookie=WP%20Cookie%20check
Host: ${host}
Content-Length: ${length.toString()}

${body}`;
        return raw;
}

function analyze(response) {
    var url = response.Uri.toString() + 'wp-login.php'
    var body = "log=thisuserdoesnotexist_xqwpak&pwd=somepassword&wp-submit=Log+In"
    const request = createRawRequestBody(url, body);
    const loginResponse = netsparker.requestRaw(url, request, false);

    if (loginResponse.StatusCode == 200) {
        const responseMatch = loginResponse.Body.toString().match(/\<strong\>Error:\<\/strong\>\sThe\susername\s\<strong\>thisuserdoesnotexist_xqwpak\<\/strong\>\sis\snot\sregistered\son\sthis\ssite\.\sIf\syou\sare\sunsure\sof\syour\susername,\stry\syour\semail\saddress\sinstead\./gm)
        if (responseMatch != null) {
            const vulnerability = new Vulnerability('bf6b1541-1124-4c62-8869-d95048f2d664 ')
            vulnerability.CustomFields.add(`Message`, responseMatch[0])
            
            return vulnerability;
        }
    } 
}