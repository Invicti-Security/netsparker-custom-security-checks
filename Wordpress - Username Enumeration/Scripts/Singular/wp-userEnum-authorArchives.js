/* 
*  This Singular Security Check script was generated by Invicti Standard 22.11.0.38744, at 03/01/2023 11:07:42 
*  For more information about Custom Script Checks and samples, please refer to documentation: 
*  https://www.invicti.com/support/custom-security-checks-scripting/ 
*/

var attacks = [
    {
        id: '77899240-3a59-48a8-ba92-f1dc4592ebba',
        name: 'Wordpress - Username Enumeration via Author Archives',
    }
];

function checkAuthors(baseUrl, count) {
    var suffix = "?author=" + count
    var url = baseUrl + suffix
    const redirectRequest = new Request(url);
    const redirectResponse = netsparker.request(redirectRequest);

    if (redirectResponse.StatusCode == 301 || redirectResponse.StatusCode == 302) {
        const enumerator = redirectResponse.Headers.GetEnumerator();
        while (enumerator.MoveNext()) {
            if (enumerator.Current.Key.toString() == "Location") {
                const location = enumerator.Current.Value;
            }
        }
        const locationRequest = new Request(location)
        const locationResponse = netsparker.request(locationRequest)
        if(locationResponse.StatusCode == 200) {
            const responseMatch = locationResponse.Body.toString().match(/\<title\>(.*)(?:,|\|).*\<\/title\>/m)
            if (responseMatch != null) {
                return responseMatch[1].substring(0,3) + "*****"
            } else {
                return null
            }
        } else {
            return null
        }
    } else {
        return null
    }
}

function analyze(response) {
    const usernames = [];
    var baseUrl = response.Uri.toString()
    for (i=1; i < 11; i++) {
        var username = checkAuthors(baseUrl, i)
        if (username != null) {
            usernames.push(username)
        }
    }
    if (usernames.length > 0) {
        const vulnerability = new Vulnerability('25720b58-fb53-4e7c-a223-2469b27ec50e')
        for (i in usernames) {
            vulnerability.CustomFields.add(`user` + i +":", usernames[i])
        }
        return vulnerability;
    } 
}