/* 
 *  This script was generated by Netsparker 5.6.3.27454, at 09/03/2020 12:58:06 
 *  For more information about Custom Script Checks and samples, please refer to documentation: 
 *  https://www.netsparker.com/support/custom-security-checks-scripting/ 
 */
var pathInfoTarget = "";
var requestedFile;
var originRequest;
var originResponse;
var attacks = [{
    id: '436c5f75-f049-40eb-9784-b13058706541',
    name: 'Relative Path Override (RPO)',
    attack: 'N3t5p4rk3r',
    attackUsage: AttackUsages.QueryPost
}];

function makeid(length) {
    var result = '';
    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var charactersLength = characters.length;
    for (var i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}

function relativeLinkPathCheck() {

    linkRegEx = /(?<link>(?=<link.*\/?>)(?=.*type=['"]text\/css['"])(?!.*href=['"][\/%2f])(?!.*href=['"]http).*)/;
    linkResult = originResponse.Body.match(linkRegEx);
    if (linkResult[0]) return true;
    return false;

}

function isFile(pathInfoTarget) {
    fileRegEx = /\/([a-z]+\.[a-z]{2,})\?*/;
    fileResult = pathInfoTarget.match(fileRegEx);

    if (fileResult[1]) {
        requestedFile = fileResult[1];
        return true;
    }
    return false;
}

function pathInfoCheck(request) {
    if (requestedFile.split(".").pop() == "jsp") {
        pathInfoTarget = pathInfoTarget.replace(".jsp", ".jsp;a");
    }

    if (pathInfoTarget.indexOf("?") > -1) {
        pathInfoTarget = pathInfoTarget.replace("?", "/" + makeid(5) + "/?");
    } else {
        pathInfoTarget = pathInfoTarget += "/" + makeid(5) + "/";
    }

    var secondResponse = netsparker.request(pathInfoTarget);

    if (secondResponse.StatusCode == 200 && originResponse.Body === secondResponse.Body) {
        return true;

    }
    return false;
}

function analyze(context, response) {
    // The main goal of this script is finding possible RPO (Relative Path Override) issue on the target.
    // This check occurs by five steps:
    // Step 1: Check if response`s context-type is text/html, otherwise, no need to continue.
    // Step 2: Check if response reflects the input. It is compulsory to exploit RPO.
    // Step 3: PATH_INFO should be enabled on the target. For more information for PATH_INFO please refer to SoF: https://stackoverflow.com/questions/2261951/what-exactly-is-path-info-in-php
    // Step 4: Check if page contains link elements that use relative URLs for the resources.
    // For more information regarding RPO, please refer to research paper: http://www.thespanner.co.uk/2014/03/21/rpo/
    //Step 1
    if (response.Headers['Content-Type'].indexOf("text/html") > -1) {		
        //Step 2
        if (response.Body.indexOf('N3t5p4rk3r') > -1) {
            //Step 3: Path Info check
            pathInfoTarget = context.request.Uri;

            if (!isFile(pathInfoTarget)) {
                return false;
            }

            originRequest = context.request;
            originResponse = response;

            if (pathInfoCheck()) {
                // Step 4: check the "link" elements 
                if (relativeLinkPathCheck())					
                    return new Vulnerability("c9691ede-ccb4-4699-9301-e5afe7e56163");
            }
        }
    }
}